# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Automated Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Setup SDL
      uses: libsdl-org/setup-sdl@v1
            
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
      
    - name: Archive build outputs (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir -p output
        cp -r ${{ steps.strings.outputs.build-output-dir }}/*.exe output/
        cp -r ${{ steps.strings.outputs.build-output-dir }}/*.dll output/
        # Copy any additional files or directories required
        cp -r ${{ steps.strings.outputs.build-output-dir }}/assets output/
      shell: bash

    - name: Archive build outputs (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p output
        cp ${{ steps.strings.outputs.build-output-dir }}/your_program output/
        # Copy any additional files or directories required
        cp -r ${{ steps.strings.outputs.build-output-dir }}/assets output/
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-output-${{ matrix.os }}
        path: output/
        
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        name: binaries-${{ matrix.os }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Release v1.0.${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: binaries/
        asset_name: ${{ matrix.os }}-${{ matrix.build_type }}.zip
        asset_content_type: application/zip
